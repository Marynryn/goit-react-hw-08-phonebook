{"version":3,"file":"static/js/656.ddad6dec.chunk.js","mappings":"kMACA,GAAgB,MAAQ,4BAA4B,qBAAuB,2CAA2C,sBAAwB,4CAA4C,OAAS,6BAA6B,aAAa,iCAAiC,WAAa,iCAAiC,cAAgB,qC,6BCgF5U,EA3EqB,WACjB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAgBnB,OAEIG,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMD,UACjBE,EAAAA,EAAAA,MAAA,QAAMD,UAAWE,EAAAA,MACbC,SApBK,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAEbC,EAAO,CAETC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,OAGrCnB,GAASsB,EAAAA,EAAAA,IAASN,IAElBF,EAAKS,OACT,EAMuChB,SAAA,EAEvBD,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,wBAChBJ,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,yBAChBJ,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,UAChBD,EAAAA,EAAAA,MAAA,OAAKD,UAAWE,EAAAA,WAAeH,SAAA,EAC3BE,EAAAA,EAAAA,MAAA,SAAOe,QAAStB,EAAQM,UAAWE,EAAAA,MAAUH,SAAA,EACzCD,EAAAA,EAAAA,KAAA,MAAIE,UAAWE,EAAAA,UAAcH,SAAC,UAC9BD,EAAAA,EAAAA,KAAA,SACImB,KAAK,OACLR,KAAK,OACLS,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,EACRC,GAAI3B,QAGZO,EAAAA,EAAAA,MAAA,SAAOe,QAASpB,EAASI,UAAWE,EAAAA,aAAiBH,SAAA,EACjDD,EAAAA,EAAAA,KAAA,MAAIE,UAAWE,EAAAA,YAAgBH,SAAC,WAChCD,EAAAA,EAAAA,KAAA,SACImB,KAAK,QACLR,KAAK,QAELY,GAAIzB,EACJwB,UAAQ,QAGhBnB,EAAAA,EAAAA,MAAA,SAAOe,QAASnB,EAAYG,UAAWE,EAAAA,aAAiBH,SAAA,EACpDD,EAAAA,EAAAA,KAAA,MAAIE,UAAWE,EAAAA,YAAgBH,SAAC,cAChCD,EAAAA,EAAAA,KAAA,SACImB,KAAK,OACLR,KAAK,WAGLY,GAAIxB,EACJuB,UAAQ,QAGhBtB,EAAAA,EAAAA,KAAA,UAAQE,UAAWE,EAAAA,cAAmBe,KAAK,SAAQlB,SAAC,0BAU5E,ECrEA,EARiB,WAEb,OACID,EAAAA,EAAAA,KAACwB,EAAY,GAGrB,C,wDCPO,IAkBI3B,EAAS,WAAH,IAAI4B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"decor\":\"RegisterForm_decor__Sx-MM\",\"form_left_decoration\":\"RegisterForm_form_left_decoration__JUdgw\",\"form_right_decoration\":\"RegisterForm_form_right_decoration__dU6Nc\",\"circle\":\"RegisterForm_circle__M55hj\",\"form-inner\":\"RegisterForm_form-inner__5bnLc\",\"form_inner\":\"RegisterForm_form_inner__5ZwTx\",\"button_submit\":\"RegisterForm_button_submit__XrLzf\"};","import { nanoid } from 'nanoid';\nimport css from 'components/RegisterForm/RegisterForm.module.css';\nimport { useDispatch } from \"react-redux\"\nimport { userPost } from 'store/operations';\n\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n\n        const user = {\n\n            name: form.elements.name.value,\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        };\n\n        dispatch(userPost(user));\n\n        form.reset();\n    };\n    return (\n\n        <div>\n            <div className=\"form\">\n                <form className={css.decor}\n                    onSubmit={handleSubmit}\n                >\n                    <div className={css.form_left_decoration}></div>\n                    <div className={css.form_right_decoration}></div>\n                    <div className={css.circle}></div>\n                    <div className={css.form_inner}>\n                        <label htmlFor={nameId} className={css.label}>\n                            <h2 className={css.form_name}>Name</h2>\n                            <input\n                                type=\"text\"\n                                name=\"name\"\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                                required\n                                id={nameId}\n                            />\n                        </label>\n                        <label htmlFor={emailId} className={css.label_number}>\n                            <h2 className={css.form_number}>Email</h2>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n\n                                id={emailId}\n                                required\n                            />\n                        </label>\n                        <label htmlFor={passwordId} className={css.label_number}>\n                            <h2 className={css.form_number}>Password</h2>\n                            <input\n                                type=\"text\"\n                                name=\"password\"\n                               \n\n                                id={passwordId}\n                                required\n                            />\n                        </label>\n                        <button className={css.button_submit} type=\"submit\">\n                            Registration\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default RegisterForm;\n\n\n\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => {\n\n    return (\n        <RegisterForm />\n\n    )\n}\n\nexport default Register;\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","nameId","nanoid","emailId","passwordId","_jsx","children","className","_jsxs","css","onSubmit","event","preventDefault","form","currentTarget","user","name","elements","value","email","password","userPost","reset","htmlFor","type","pattern","title","required","id","RegisterForm","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}
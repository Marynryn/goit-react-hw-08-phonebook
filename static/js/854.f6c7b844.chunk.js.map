{"version":3,"file":"static/js/854.f6c7b844.chunk.js","mappings":"kMACA,GAAgB,MAAQ,yBAAyB,qBAAuB,wCAAwC,sBAAwB,yCAAyC,OAAS,0BAA0B,aAAa,8BAA8B,WAAa,8BAA8B,cAAgB,kC,6BCsE1T,EAjEkB,WAGd,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAcnB,OAEIE,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMD,UACjBE,EAAAA,EAAAA,MAAA,QAAMD,UAAWE,EAAAA,MACbC,SAlBK,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAEbC,EAAO,CACTC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,OAGrClB,GAASoB,EAAAA,EAAAA,IAAML,IAEfF,EAAKQ,OACT,EAMuCf,SAAA,EAEvBD,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,wBAChBJ,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,yBAChBJ,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAAA,UAChBD,EAAAA,EAAAA,MAAA,OAAKD,UAAWE,EAAAA,WAAeH,SAAA,EAC3BE,EAAAA,EAAAA,MAAA,SAAOc,QAASpB,EAASK,UAAWE,EAAAA,aAAiBH,SAAA,EACjDD,EAAAA,EAAAA,KAAA,MAAIE,UAAWE,EAAAA,YAAgBH,SAAC,WAChCD,EAAAA,EAAAA,KAAA,SACIkB,KAAK,QACLC,KAAK,QAELC,GAAIvB,EACJwB,UAAQ,QAGhBlB,EAAAA,EAAAA,MAAA,SAAOc,QAASlB,EAAYG,UAAWE,EAAAA,aAAiBH,SAAA,EACpDD,EAAAA,EAAAA,KAAA,MAAIE,UAAWE,EAAAA,YAAgBH,SAAC,cAChCD,EAAAA,EAAAA,KAAA,SACIkB,KAAK,OACLC,KAAK,WACLG,QAAQ,qGACRC,MAAM,+FAENH,GAAIrB,EACJsB,UAAQ,QAGhBrB,EAAAA,EAAAA,KAAA,UAAQE,UAAWE,EAAAA,cAAmBc,KAAK,SAAQjB,SAAC,mBAU5E,EC5DA,EANc,WACV,OACID,EAAAA,EAAAA,KAACwB,EAAS,GAElB,C,wDCNO,IAkBI1B,EAAS,WAAH,IAAI2B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"decor\":\"LoginForm_decor__b9rsA\",\"form_left_decoration\":\"LoginForm_form_left_decoration__u2nfk\",\"form_right_decoration\":\"LoginForm_form_right_decoration__ZDY8s\",\"circle\":\"LoginForm_circle__xcWuL\",\"form-inner\":\"LoginForm_form-inner__phioh\",\"form_inner\":\"LoginForm_form_inner__KyiWy\",\"button_submit\":\"LoginForm_button_submit__CzSXV\"};","import { nanoid } from 'nanoid';\nimport css from 'components/LoginForm/LoginForm.module.css';\nimport { useDispatch } from \"react-redux\"\nimport { login } from 'store/operations';\n\n\nconst LoginForm = () => {\n\n\n    const dispatch = useDispatch();\n\n    const emailId = nanoid();\n    const passwordId = nanoid();\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n\n        const user = {\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        };\n\n        dispatch(login(user));\n\n        form.reset();\n    };\n    return (\n\n        <div>\n            <div className=\"form\">\n                <form className={css.decor}\n                    onSubmit={handleSubmit}\n                >\n                    <div className={css.form_left_decoration}></div>\n                    <div className={css.form_right_decoration}></div>\n                    <div className={css.circle}></div>\n                    <div className={css.form_inner}>\n                        <label htmlFor={emailId} className={css.label_number}>\n                            <h2 className={css.form_number}>Email</h2>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n\n                                id={emailId}\n                                required\n                            />\n                        </label>\n                        <label htmlFor={passwordId} className={css.label_number}>\n                            <h2 className={css.form_number}>Password</h2>\n                            <input\n                                type=\"text\"\n                                name=\"password\"\n                                pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\n                                id={passwordId}\n                                required\n                            />\n                        </label>\n                        <button className={css.button_submit} type=\"submit\">\n                            Login\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default LoginForm;","import LoginForm from \"components/LoginForm/LoginForm\";\n\n\nconst Login = () => {\n    return (\n        <LoginForm />\n    )\n}\n\nexport default Login;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","emailId","nanoid","passwordId","_jsx","children","className","_jsxs","css","onSubmit","event","preventDefault","form","currentTarget","user","email","elements","value","password","login","reset","htmlFor","type","name","id","required","pattern","title","LoginForm","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}